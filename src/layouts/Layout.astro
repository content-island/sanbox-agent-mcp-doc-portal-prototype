---
import { getNavigationStructure } from '../lib/content-island';
import type { NavigationFolder } from '../lib/content-island';

export interface Props {
  title: string;
  description?: string;
  selectedFolderSlug?: string;
  selectedItemSlug?: string;
}

const { title, description, selectedFolderSlug, selectedItemSlug } = Astro.props;

let navigationData: { folders: NavigationFolder[] } = { folders: [] };
let error = '';

try {
  navigationData = await getNavigationStructure();
} catch (err) {
  console.error('Failed to load navigation:', err);
  error = 'Failed to load navigation data';
}
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title} | Documentation</title>
    {description && <meta name="description" content={description} />}
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    
    <!-- Highlight.js CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github.min.css" />
    
    <!-- Custom styles -->
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        line-height: 1.6;
        color: #333;
        background-color: #fff;
      }

      .app-container {
        display: flex;
        min-height: 100vh;
      }

      .sidebar {
        width: 280px;
        background-color: #f8f9fa;
        border-right: 1px solid #e1e4e8;
        overflow-y: auto;
        position: fixed;
        height: 100vh;
        z-index: 100;
      }

      .sidebar-header {
        padding: 1.5rem 1rem;
        border-bottom: 1px solid #e1e4e8;
        background-color: #fff;
      }

      .sidebar-header h1 {
        font-size: 1.25rem;
        font-weight: 600;
        color: #1f2328;
      }

      .sidebar-nav {
        padding: 1rem 0;
      }

      .nav-folder {
        margin-bottom: 1rem;
      }

      .folder-title {
        padding: 0.5rem 1rem;
        font-weight: 600;
        font-size: 0.875rem;
        color: #656d76;
        text-transform: uppercase;
        letter-spacing: 0.025em;
        border: none;
        background: none;
        width: 100%;
        text-align: left;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .folder-title:hover {
        color: #0969da;
      }

      .folder-items {
        margin-left: 0.5rem;
      }

      .nav-item {
        display: block;
        padding: 0.375rem 1rem 0.375rem 1.5rem;
        color: #656d76;
        text-decoration: none;
        font-size: 0.875rem;
        border-left: 3px solid transparent;
        transition: all 0.15s ease;
      }

      .nav-item:hover {
        color: #0969da;
        background-color: #f6f8fa;
      }

      .nav-item.active {
        color: #0969da;
        background-color: #dbeafe;
        border-left-color: #0969da;
        font-weight: 500;
      }

      .main-content {
        margin-left: 280px;
        flex: 1;
        padding: 2rem;
        max-width: calc(100vw - 280px);
      }

      .content-area {
        max-width: 800px;
        margin: 0 auto;
      }

      .content-header {
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #e1e4e8;
      }

      .content-title {
        font-size: 2rem;
        font-weight: 600;
        color: #1f2328;
        margin-bottom: 0.5rem;
      }

      .content-description {
        color: #656d76;
        font-size: 1.125rem;
      }

      .markdown-content {
        line-height: 1.7;
      }

      .markdown-content h1,
      .markdown-content h2,
      .markdown-content h3,
      .markdown-content h4,
      .markdown-content h5,
      .markdown-content h6 {
        margin-top: 2rem;
        margin-bottom: 1rem;
        font-weight: 600;
        color: #1f2328;
      }

      .markdown-content h1 {
        font-size: 2rem;
        border-bottom: 1px solid #e1e4e8;
        padding-bottom: 0.5rem;
      }

      .markdown-content h2 {
        font-size: 1.5rem;
        border-bottom: 1px solid #e1e4e8;
        padding-bottom: 0.25rem;
      }

      .markdown-content h3 {
        font-size: 1.25rem;
      }

      .markdown-content p {
        margin-bottom: 1rem;
      }

      .markdown-content ul,
      .markdown-content ol {
        margin-bottom: 1rem;
        padding-left: 2rem;
      }

      .markdown-content li {
        margin-bottom: 0.25rem;
      }

      .markdown-content code:not(.hljs) {
        background-color: #f6f8fa;
        padding: 0.125rem 0.25rem;
        border-radius: 3px;
        font-size: 0.875em;
        font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
      }

      .markdown-content pre {
        background-color: #f6f8fa;
        border-radius: 6px;
        padding: 1rem;
        overflow-x: auto;
        margin-bottom: 1rem;
        border: 1px solid #e1e4e8;
      }

      .markdown-content pre code {
        background-color: transparent;
        padding: 0;
        border-radius: 0;
        font-size: 0.875rem;
      }

      .markdown-content blockquote {
        border-left: 4px solid #e1e4e8;
        padding-left: 1rem;
        margin-bottom: 1rem;
        color: #656d76;
        font-style: italic;
      }

      .markdown-content table {
        border-collapse: collapse;
        width: 100%;
        margin-bottom: 1rem;
      }

      .markdown-content th,
      .markdown-content td {
        border: 1px solid #e1e4e8;
        padding: 0.75rem;
        text-align: left;
      }

      .markdown-content th {
        background-color: #f6f8fa;
        font-weight: 600;
      }

      .error-message {
        color: #d1242f;
        background-color: #ffebee;
        padding: 1rem;
        border-radius: 6px;
        border: 1px solid #f5c6cb;
        margin-bottom: 1rem;
      }

      .loading {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        color: #656d76;
      }

      /* Responsive design */
      @media (max-width: 768px) {
        .sidebar {
          transform: translateX(-100%);
          transition: transform 0.3s ease;
        }

        .sidebar.open {
          transform: translateX(0);
        }

        .main-content {
          margin-left: 0;
          max-width: 100vw;
          padding: 1rem;
        }

        .mobile-menu-toggle {
          display: block;
          position: fixed;
          top: 1rem;
          left: 1rem;
          z-index: 101;
          background: #0969da;
          color: white;
          border: none;
          padding: 0.5rem;
          border-radius: 4px;
          cursor: pointer;
        }
      }

      @media (min-width: 769px) {
        .mobile-menu-toggle {
          display: none;
        }
      }

      /* Focus styles for accessibility */
      .nav-item:focus,
      .folder-title:focus {
        outline: 2px solid #0969da;
        outline-offset: 2px;
      }

      .mobile-menu-toggle:focus {
        outline: 2px solid #fff;
        outline-offset: 2px;
      }
    </style>
  </head>
  <body>
    <div class="app-container">
      <button class="mobile-menu-toggle" id="mobile-menu-toggle" aria-label="Toggle navigation menu">
        ☰
      </button>

      <aside class="sidebar" id="sidebar">
        <div class="sidebar-header">
          <h1>Documentation</h1>
        </div>
        
        <nav class="sidebar-nav" role="navigation" aria-label="Documentation navigation">
          {error ? (
            <div class="error-message" role="alert">
              {error}
            </div>
          ) : (
            <div>
              {navigationData.folders.map((folder) => (
                <div class="nav-folder">
                  <button 
                    class="folder-title" 
                    aria-expanded="true"
                    aria-controls={`folder-${folder.slug}`}
                  >
                    {folder.title}
                    <span aria-hidden="true">▼</span>
                  </button>
                  <div class="folder-items" id={`folder-${folder.slug}`}>
                    {folder.items.map((item) => (
                      <a 
                        href={`/${folder.slug}/${item.slug}`}
                        class={`nav-item ${
                          selectedFolderSlug === folder.slug && selectedItemSlug === item.slug 
                            ? 'active' 
                            : ''
                        }`}
                      >
                        {item.title}
                      </a>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          )}
        </nav>
      </aside>

      <main class="main-content" role="main">
        <div class="content-area">
          <slot />
        </div>
      </main>
    </div>

    <script>
      // Mobile menu toggle
      const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
      const sidebar = document.getElementById('sidebar');

      if (mobileMenuToggle && sidebar) {
        mobileMenuToggle.addEventListener('click', () => {
          sidebar.classList.toggle('open');
        });

        // Close sidebar when clicking outside
        document.addEventListener('click', (event) => {
          if (window.innerWidth <= 768) {
            const target = event.target as HTMLElement;
            if (!sidebar.contains(target) && !mobileMenuToggle.contains(target)) {
              sidebar.classList.remove('open');
            }
          }
        });
      }

      // Folder collapsing functionality
      document.querySelectorAll('.folder-title').forEach(button => {
        button.addEventListener('click', () => {
          const isExpanded = button.getAttribute('aria-expanded') === 'true';
          const folderId = button.getAttribute('aria-controls');
          const folderContent = folderId ? document.getElementById(folderId) : null;
          const arrow = button.querySelector('span[aria-hidden="true"]');
          
          if (folderContent && arrow) {
            if (isExpanded) {
              button.setAttribute('aria-expanded', 'false');
              folderContent.style.display = 'none';
              arrow.textContent = '▶';
            } else {
              button.setAttribute('aria-expanded', 'true');
              folderContent.style.display = 'block';
              arrow.textContent = '▼';
            }
          }
        });
      });

      // Handle keyboard navigation
      document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && window.innerWidth <= 768) {
          sidebar?.classList.remove('open');
        }
      });
    </script>
  </body>
</html>
